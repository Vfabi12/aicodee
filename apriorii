ðŸ˜ŠApriori

from itertools import combinations
data = [
    ['T1', ['A', 'B', 'C']],
    ['T2', ['A', 'C']],
    ['T3', ['A', 'D']],
    ['T4', ['B', 'E', 'F']],
]

init = []
for i in data:
    for q in i[1]:
        if q not in init:
            init.append(q)
init = sorted(init)
print(init)

sp = 0.4
s = int(sp * len(init))

from collections import Counter
c = Counter()
for i in init:
    for d in data:
        if i in d[1]:
            c[i] += 1
print("C1:")
for i in c:
    print([i], ": " + str(c[i]))
print()

l = Counter()
for i in c:
    if c[i] >= s:
        l[frozenset([i])] += c[i]
print("L1:")
for i in l:
    print(list(i), ": " + str(l[i]))
print()
pl = l
pos = 1

for count in range(2, 1000):
    nc = set()
    temp = list(l)
    for i in range(0, len(temp)):
        for j in range(i + 1, len(temp)):
            t = temp[i].union(temp[j])
            if len(t) == count:
                nc.add(temp[i].union(temp[j]))
    nc = list(nc)
    c = Counter()
    for i in nc:
        c[i] = 0
    for q in data:
        temp = set(q[1])
        for i in c:
            if i.issubset(temp):
                c[i] += 1
    print("C" + str(count) + ":")
    for i in c:
        print(list(i), ": " + str(c[i]))
    print()
    l = Counter()
    for i in c:
        if c[i] >= s:
            l[i] += c[i]
    print("L" + str(count) + ":")
    for i in l:
        print(list(i), ": " + str(l[i]))
    print()
    if len(l) == 0:
        break
    pl = l
    pos = count

print("Result:")
print("L" + str(pos) + ":")
for i in pl:
    print(list(i), ": " + str(pl[i]))
print()

for count in range(1, pos):
    print(f"Association Rules (L{count}):")
    for l1 in pl:
        c = [frozenset(q) for q in combinations(list(l1), count)]
        for a in c:
            b = l1 - a
            ab = l1
            sab = 0
            sa = 0
            sb = 0
            for q in data:
                temp = set(q[1])
                if a.issubset(temp):
                    sa += 1
                if b.issubset(temp):
                    sb += 1
                if ab.issubset(temp):
                    sab += 1
            if sa > 0:
                conf_ab = sab / sa * 100
                if conf_ab >= sp:
                    a_str = ' & '.join(list(a))
                    b_str = ' & '.join(list(b))
                    print(f"{a_str} => {b_str}: Confidence = {conf_ab:.2f}%")

